{"version":3,"file":"audio-processor.mjs","sources":["../src/audio-processor.mjs"],"sourcesContent":["class audioProcessor extends AudioWorkletProcessor {\r\n\tconstructor(...args) {\r\n\t\tsuper(...args);\r\n\t\tthis.audioSample = 0;\r\n\t\tthis.byteSample = 0;\r\n\t\tthis.drawMode = 'Points';\r\n\t\tthis.errorDisplayed = true;\r\n\t\tthis.func = null;\r\n\t\tthis.getValues = null;\r\n\t\tthis.isFuncbeat = false;\r\n\t\tthis.isPlaying = false;\r\n\t\tthis.playbackSpeed = 1;\r\n\t\tthis.lastByteValue = [null, null];\r\n\t\tthis.lastFuncValue = [null, null];\r\n\t\tthis.lastTime = -1;\r\n\t\tthis.outValue = [0, 0];\r\n\t\tthis.sampleRate = 8000;\r\n\t\tthis.sampleRatio = 1;\r\n\t\tthis.fftBuffer = [];\r\n\t\tthis.fftSize = 256;\r\n\t\tthis.audioFiles = new Map();\r\n\t\tObject.seal(this);\r\n\t\taudioProcessor.deleteGlobals();\r\n\t\taudioProcessor.freezeGlobals();\r\n\t\tthis.port.addEventListener('message', e => this.receiveData(e.data));\r\n\t\tthis.port.start();\r\n\t}\r\n\tstatic deleteGlobals() {\r\n\t\t// Delete single letter variables to prevent persistent variable errors (covers a good enough range)\r\n\t\tfor(let i = 0; i < 26; ++i) {\r\n\t\t\tdelete globalThis[String.fromCharCode(65 + i)];\r\n\t\t\tdelete globalThis[String.fromCharCode(97 + i)];\r\n\t\t}\r\n\t\t// Delete global variables\r\n\t\tfor(const name in globalThis) {\r\n\t\t\tif(Object.prototype.hasOwnProperty.call(globalThis, name)) {\r\n\t\t\t\tdelete globalThis[name];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tstatic freezeGlobals() {\r\n\t\tObject.getOwnPropertyNames(globalThis).forEach(name => {\r\n\t\t\tconst prop = globalThis[name];\r\n\t\t\tconst type = typeof prop;\r\n\t\t\tif((type === 'object' || type === 'function') && name !== 'globalThis') {\r\n\t\t\t\tObject.freeze(prop);\r\n\t\t\t}\r\n\t\t\tif(type === 'function' && Object.prototype.hasOwnProperty.call(prop, 'prototype')) {\r\n\t\t\t\tObject.freeze(prop.prototype);\r\n\t\t\t}\r\n\t\t\tObject.defineProperty(globalThis, name, { writable: false, configurable: false });\r\n\t\t});\r\n\t}\r\n\tstatic getErrorMessage(err, time) {\r\n\t\tconst when = time === null ? 'compilation' : 't=' + time;\r\n\t\tif(!(err instanceof Error)) {\r\n\t\t\treturn `${ when } thrown: ${ typeof err === 'string' ? err : JSON.stringify(err) }`;\r\n\t\t}\r\n\t\tconst { message, lineNumber, columnNumber } = err;\r\n\t\treturn `${ when } error: ${ typeof message === 'string' ? message : JSON.stringify(message) }${\r\n\t\t\ttypeof lineNumber === 'number' && typeof columnNumber === 'number' ?\r\n\t\t\t\t` (at line ${ lineNumber - 3 }, character ${ +columnNumber })` : '' }`;\r\n\t}\r\n\tprocess(inputs, [chData]) {\r\n\t\tconst chDataLen = chData[0].length;\r\n\t\tif(!chDataLen || !this.isPlaying) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tlet time = this.sampleRatio * this.audioSample;\r\n\t\tlet { byteSample } = this;\r\n\t\tconst drawBuffer = [];\r\n\t\tconst isDiagram = this.drawMode === 'Combined' || this.drawMode === 'Diagram';\r\n\t\tfor(let i = 0; i < chDataLen; ++i) {\r\n\t\t\ttime += this.sampleRatio;\r\n\t\t\tconst currentTime = Math.floor(time);\r\n\t\t\tif(this.lastTime !== currentTime) {\r\n\t\t\t\tlet funcValue;\r\n\t\t\t\tconst currentSample = Math.floor(byteSample);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif(this.isFuncbeat) {\r\n\t\t\t\t\t\tfuncValue = this.func(currentSample / this.sampleRate, this.sampleRate);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfuncValue = this.func(currentSample);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch(err) {\r\n\t\t\t\t\tif(this.errorDisplayed) {\r\n\t\t\t\t\t\tthis.errorDisplayed = false;\r\n\t\t\t\t\t\tthis.sendData({\r\n\t\t\t\t\t\t\terror: {\r\n\t\t\t\t\t\t\t\tmessage: audioProcessor.getErrorMessage(err, currentSample),\r\n\t\t\t\t\t\t\t\tisRuntime: true\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfuncValue = NaN;\r\n\t\t\t\t}\r\n\t\t\t\tfuncValue = Array.isArray(funcValue) ? [funcValue[0], funcValue[1]] : [funcValue, funcValue];\r\n\t\t\t\tlet hasValue = false;\r\n\t\t\t\tlet ch = 2;\r\n\t\t\t\twhile(ch--) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tfuncValue[ch] = +funcValue[ch];\r\n\t\t\t\t\t} catch(err) {\r\n\t\t\t\t\t\tfuncValue[ch] = NaN;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(isDiagram) {\r\n\t\t\t\t\t\tif(!isNaN(funcValue[ch])) {\r\n\t\t\t\t\t\t\tthis.outValue[ch] = this.getValues(funcValue[ch], ch);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.lastByteValue[ch] = NaN;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\thasValue = true;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(funcValue[ch] === this.lastFuncValue[ch]) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t} else if(!isNaN(funcValue[ch])) {\r\n\t\t\t\t\t\tthis.outValue[ch] = this.getValues(funcValue[ch], ch);\r\n\t\t\t\t\t\thasValue = true;\r\n\t\t\t\t\t} else if(!isNaN(this.lastFuncValue[ch])) {\r\n\t\t\t\t\t\tthis.lastByteValue[ch] = NaN;\r\n\t\t\t\t\t\thasValue = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(hasValue) {\r\n\t\t\t\t\tdrawBuffer.push({ t: currentSample, value: [...this.lastByteValue] });\r\n\t\t\t\t}\r\n\t\t\t\tbyteSample += currentTime - this.lastTime;\r\n\t\t\t\tthis.lastFuncValue = funcValue;\r\n\t\t\t\tthis.lastTime = currentTime;\r\n\t\t\t}\r\n\t\t\tchData[0][i] = this.outValue[0];\r\n\t\t\tchData[1][i] = this.outValue[1];\r\n\t\t}\r\n\t\tif(Math.abs(byteSample) > Number.MAX_SAFE_INTEGER) {\r\n\t\t\tthis.resetTime();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tthis.audioSample += chDataLen;\r\n\t\tlet isSend = false;\r\n\t\tconst data = {};\r\n\t\tif(byteSample !== this.byteSample) {\r\n\t\t\tisSend = true;\r\n\t\t\tdata.byteSample = this.byteSample = byteSample;\r\n\t\t}\r\n\t\tif(drawBuffer.length) {\r\n\t\t\tisSend = true;\r\n\t\t\tdata.drawBuffer = drawBuffer;\r\n\t\t\t// Collect samples for FFT\r\n\t\t\tfor(const sample of drawBuffer) {\r\n\t\t\t\tthis.fftBuffer.push((sample.value[0] + sample.value[1]) / 2);\r\n\t\t\t}\r\n\t\t\tif(this.fftBuffer.length >= this.fftSize) {\r\n\t\t\t\tdata.fftData = this.fftBuffer.slice(-this.fftSize);\r\n\t\t\t\tthis.fftBuffer = this.fftBuffer.slice(-this.fftSize);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(isSend) {\r\n\t\t\tthis.sendData(data);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\treceiveData(data) {\r\n\t\tif(data.byteSample !== undefined) {\r\n\t\t\tthis.byteSample = +data.byteSample || 0;\r\n\t\t\tthis.resetValues();\r\n\t\t}\r\n\t\tif(data.errorDisplayed === true) {\r\n\t\t\tthis.errorDisplayed = true;\r\n\t\t}\r\n\t\tif(data.isPlaying !== undefined) {\r\n\t\t\tthis.isPlaying = data.isPlaying;\r\n\t\t}\r\n\t\tif(data.playbackSpeed !== undefined) {\r\n\t\t\tconst sampleRatio = this.sampleRatio / this.playbackSpeed;\r\n\t\t\tthis.playbackSpeed = data.playbackSpeed;\r\n\t\t\tthis.setSampleRatio(sampleRatio);\r\n\t\t}\r\n\t\tif(data.mode !== undefined) {\r\n\t\t\tthis.isFuncbeat = data.mode === 'Funcbeat';\r\n\t\t\tswitch(data.mode) {\r\n\t\t\tcase 'Bytebeat':\r\n\t\t\t\tthis.getValues = (funcValue, ch) => (this.lastByteValue[ch] = funcValue & 255) / 127.5 - 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Signed Bytebeat':\r\n\t\t\t\tthis.getValues = (funcValue, ch) =>\r\n\t\t\t\t\t(this.lastByteValue[ch] = (funcValue + 128) & 255) / 127.5 - 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Floatbeat':\r\n\t\t\tcase 'Funcbeat':\r\n\t\t\t\tthis.getValues = (funcValue, ch) => {\r\n\t\t\t\t\tconst outValue = Math.max(Math.min(funcValue, 1), -1);\r\n\t\t\t\t\tthis.lastByteValue[ch] = Math.round((outValue + 1) * 127.5);\r\n\t\t\t\t\treturn outValue;\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: this.getValues = (funcValue, ch) => (this.lastByteValue[ch] = NaN);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(data.drawMode !== undefined) {\r\n\t\t\tthis.drawMode = data.drawMode;\r\n\t\t}\r\n\t\tif(data.setFunction !== undefined) {\r\n\t\t\tthis.setFunction(data.setFunction);\r\n\t\t}\r\n\t\tif(data.resetTime === true) {\r\n\t\t\tthis.resetTime();\r\n\t\t}\r\n\t\tif(data.sampleRate !== undefined) {\r\n\t\t\tthis.sampleRate = data.sampleRate;\r\n\t\t}\r\n\t\tif(data.sampleRatio !== undefined) {\r\n\t\t\tthis.setSampleRatio(data.sampleRatio);\r\n\t\t}\r\n\t\tif(data.audioFiles !== undefined) {\r\n\t\t\tthis.audioFiles = new Map(data.audioFiles);\r\n\t\t}\r\n\t}\r\n\tsendData(data) {\r\n\t\tthis.port.postMessage(data);\r\n\t}\r\n\tresetTime() {\r\n\t\tthis.byteSample = 0;\r\n\t\tthis.resetValues();\r\n\t\tthis.sendData({ byteSample: 0 });\r\n\t}\r\n\tresetValues() {\r\n\t\tthis.audioSample = 0;\r\n\t\tthis.lastByteValue = this.lastFuncValue = [null, null];\r\n\t\tthis.lastTime = -1;\r\n\t\tthis.outValue = [0, 0];\r\n\t}\r\n\tsetFunction(codeText) {\r\n\t\t// Create shortened Math functions\r\n\t\tconst params = Object.getOwnPropertyNames(Math);\r\n\t\tconst values = params.map(k => Math[k]);\r\n\t\t\r\n\t\tconst funcs = {\r\n\t\t\t/*bit*/        \"bitC\": function (x, y, z) { return x & y ? z : 0 },\r\n\t\t\t/*bit reverse*/\"br\": function (x, size = 8) {\r\n\t\t\t\tif (size > 32) { throw new Error(\"br() Size cannot be greater than 32\") } else {\r\n\t\t\t\t\tlet result = 0;\r\n\t\t\t\t\tfor (let idx = 0; idx < (size - 0); idx++) {\r\n\t\t\t\t\t\tresult += funcs.bitC(x, 2 ** idx, 2 ** (size - (idx + 1)))\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn result\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t/*sin that loops every 128 \"steps\", instead of every pi steps*/\"sinf\": function (x) { return Math.sin(x / (128 / Math.PI)) },\r\n\t\t\t/*cos that loops every 128 \"steps\", instead of every pi steps*/\"cosf\": function (x) { return Math.cos(x / (128 / Math.PI)) },\r\n\t\t\t/*tan that loops every 128 \"steps\", instead of every pi steps*/\"tanf\": function (x) { return Math.tan(x / (128 / Math.PI)) },\r\n\t\t\t/*converts t into a string composed of it's bits, regex's that*/\"regG\": function (t, X) { return X.test(t.toString(2)) },\r\n\r\n\t\t\t\"saw\": t => t % 256,\r\n\t\t\t\"tri\": t => Math.abs((t % 512) - 256),\r\n\t\t\t\"sq\": t => t % 256 < 128 ? 255 : 0,\r\n\t\t\t\"audioIN\": (index, channel = 0, file = 0) => {\r\n\t\t\t\tconst audioFile = this.audioFiles.get(file);\r\n\t\t\t\tif (!audioFile || !audioFile.data) return 0;\r\n\t\t\t\tconst sampleIndex = Math.floor(index) + (channel % audioFile.channels);\r\n\t\t\t\treturn audioFile.data[sampleIndex] || 0;\r\n\t\t\t},\r\n\t\t\t\"audioLength\": (file = 0) => {\r\n\t\t\t\tconst audioFile = this.audioFiles.get(file);\r\n\t\t\t\treturn audioFile ? audioFile.data.length : 0;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tparams.push('int', 'window', ...Object.keys(funcs));\r\n\t\tvalues.push(Math.floor, globalThis, ...Object.values(funcs));\r\n\t\taudioProcessor.deleteGlobals();\r\n\t\t// Code testing\r\n\t\tlet isCompiled = false;\r\n\t\tconst oldFunc = this.func;\r\n\t\ttry {\r\n\t\t\tif(this.isFuncbeat) {\r\n\t\t\t\tthis.func = new Function(...params, codeText).bind(globalThis, ...values);\r\n\t\t\t} else {\r\n\t\t\t\t// Optimize code like eval(unescape(escape`XXXX`.replace(/u(..)/g,\"$1%\")))\r\n\t\t\t\tcodeText = codeText.trim().replace(\r\n\t\t\t\t\t/^eval\\(unescape\\(escape(?:`|\\('|\\(\"|\\(`)(.*?)(?:`|'\\)|\"\\)|`\\)).replace\\(\\/u\\(\\.\\.\\)\\/g,[\"'`]\\$1%[\"'`]\\)\\)\\)$/,\r\n\t\t\t\t\t(match, m1) => unescape(escape(m1).replace(/u(..)/g, '$1%')));\r\n\t\t\t\tthis.func = new Function(...params, 't', `return 0,\\n${ codeText || 0 };`)\r\n\t\t\t\t\t.bind(globalThis, ...values);\r\n\t\t\t}\r\n\t\t\tisCompiled = true;\r\n\t\t\tif(this.isFuncbeat) {\r\n\t\t\t\tthis.func = this.func();\r\n\t\t\t\tthis.func(0, this.sampleRate);\r\n\t\t\t} else {\r\n\t\t\t\tthis.func(0);\r\n\t\t\t}\r\n\t\t} catch(err) {\r\n\t\t\tif(!isCompiled) {\r\n\t\t\t\tthis.func = oldFunc;\r\n\t\t\t}\r\n\t\t\tthis.errorDisplayed = false;\r\n\t\t\tthis.sendData({\r\n\t\t\t\terror: { message: audioProcessor.getErrorMessage(err, isCompiled ? 0 : null), isCompiled },\r\n\t\t\t\tupdateUrl: isCompiled\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.errorDisplayed = false;\r\n\t\tthis.sendData({ error: { message: '', isCompiled }, updateUrl: true });\r\n\t}\r\n\tsetSampleRatio(sampleRatio) {\r\n\t\tconst timeOffset = Math.floor(this.sampleRatio * this.audioSample) - this.lastTime;\r\n\t\tthis.sampleRatio = sampleRatio * this.playbackSpeed;\r\n\t\tthis.lastTime = Math.floor(this.sampleRatio * this.audioSample) - timeOffset;\r\n\t}\r\n}\r\n\r\nregisterProcessor('audioProcessor', audioProcessor);\r\n"],"names":["audioProcessor","AudioWorkletProcessor","constructor","args","super","this","audioSample","byteSample","drawMode","errorDisplayed","func","getValues","isFuncbeat","isPlaying","playbackSpeed","lastByteValue","lastFuncValue","lastTime","outValue","sampleRate","sampleRatio","fftBuffer","fftSize","audioFiles","Map","Object","seal","deleteGlobals","freezeGlobals","port","addEventListener","e","receiveData","data","start","i","globalThis","String","fromCharCode","name","prototype","hasOwnProperty","call","getOwnPropertyNames","forEach","prop","type","freeze","defineProperty","writable","configurable","getErrorMessage","err","time","when","Error","JSON","stringify","message","lineNumber","columnNumber","process","inputs","chData","chDataLen","length","drawBuffer","isDiagram","currentTime","Math","floor","funcValue","currentSample","sendData","error","isRuntime","NaN","Array","isArray","hasValue","ch","isNaN","push","t","value","abs","Number","MAX_SAFE_INTEGER","resetTime","isSend","sample","fftData","slice","undefined","resetValues","setSampleRatio","mode","max","min","round","setFunction","postMessage","codeText","params","values","map","k","funcs","bitC","x","y","z","br","size","result","idx","sinf","sin","PI","cosf","cos","tanf","tan","regG","X","test","toString","saw","tri","sq","audioIN","index","channel","file","audioFile","get","sampleIndex","channels","audioLength","keys","isCompiled","oldFunc","Function","bind","trim","replace","match","m1","unescape","escape","updateUrl","timeOffset","registerProcessor"],"mappings":"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"}